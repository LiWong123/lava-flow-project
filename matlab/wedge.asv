close all force;
clearvars;

domain = Domain();

xDomain = [-3 5]; % solve for a<x<b
yDomain = [-3 4]; % solve for c<y<d
domain.setDomain(xDomain,yDomain);
domain.setMeshSize(0.03); % set resolution of solver

% set obstacle location
AA=0.2679;
offs=-0.5;
tt = 0:0.002:1;
xVertices=horzcat(AA*tt+offs,AA*flip(tt));
yVertices=horzcat(tt,flip(tt));


% xVertices = [-0.5, -0.232];
% yVertices = [0, 1];

domain.addObstacle(xVertices, yVertices);
%domain.addObstacleFromEdge(xVertices, yVertices, 0.5);
domain.setModel();
domain.showGeometry();


domain.setModel();
domain.showGeometry();


pde = FluidPDE();
pde.setFF(0.1); % set the F value
pde.setEpsilon(0.001)
contours = linspace(0.2,3,20); % min, max contour lines, number of contour lines

% create PDE: dh^3/dx = F[d/dx(h^3 dh/dx) + d/dy(h^3 dh/dy)]
pde.specifyPDE(domain);
pde.applyDefaultBCs();

% solve and plot answer
pde.solvePDE();
pde.plotSolution(contours);


